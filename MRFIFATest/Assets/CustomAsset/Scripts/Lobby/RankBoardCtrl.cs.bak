using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.Networking;
using System;

public class RankBoardCtrl : MonoBehaviour
{
    public class SlotInfo
    {
        public Text text_name;
        public Text text_score;
        public RawImage image_profile;
        public Image image_grade;
    }

    private SlotInfo[] slotInfos;

    private Text text_myRank;

    private Animator anim;

    private Toggle[] toggles_game;

    private string gameType;

    private float delayTime = 0f;

    private CanvasGroup canvasGroup;

    private bool isInit = false;


    [System.Serializable]
    public class LeaderBoardInfo
    {
        public UserInfo[] users;

        [System.Serializable]
        public class UserInfo
        {
            public string Rank;
            public string Nick;
            public string Score;
            public string Image;
        }
    }

    private void Update()
    {
        if (delayTime > 0f)
        {
            delayTime -= Time.deltaTime;
            if (delayTime <= 0f)
            {
                canvasGroup.interactable = true;
            }
        }
    }
    private void Start()
    {
        Init();
    }

    void Init()
    {
        if (isInit)
        {
            return;
        }

        anim = GetComponent<Animator>();

        slotInfos = new SlotInfo[11];

        Transform tempTr = transform.Find("Board/Image_Bar_Mine");
        text_myRank = tempTr.Find("Text_Rank").GetComponent<Text>();

        slotInfos[0] = new SlotInfo();
        slotInfos[0].text_name = tempTr.Find("Text_Name").GetComponent<Text>();
        slotInfos[0].text_score = tempTr.Find("Text_Score").GetComponent<Text>();
        slotInfos[0].image_profile = tempTr.Find("Image_Profile").GetComponent<RawImage>();
        slotInfos[0].image_grade = tempTr.Find("Image_Grade").GetComponent<Image>();

        tempTr = transform.Find("Board/List");

        for (int i = 0; i < 10; i++)
        {
            slotInfos[i + 1] = new SlotInfo();
            slotInfos[i + 1].text_name = tempTr.GetChild(i).Find("Text_Name").GetComponent<Text>();
            slotInfos[i + 1].text_score = tempTr.GetChild(i).Find("Text_Score").GetComponent<Text>();
            slotInfos[i + 1].image_profile = tempTr.GetChild(i).Find("Image_Profile").GetComponent<RawImage>();
            slotInfos[i + 1].image_grade = tempTr.GetChild(i).Find("Image_Grade").GetComponent<Image>();
        }

        tempTr = transform.Find("Board/Toggles");
        canvasGroup = tempTr.GetComponent<CanvasGroup>();
        toggles_game = new Toggle[tempTr.childCount];
        for (int i = 0; i < toggles_game.Length; i++)
        {
            Toggle toggle = tempTr.GetChild(i).GetComponent<Toggle>();

            toggles_game[i] = toggle;
            toggles_game[i].onValueChanged.RemoveAllListeners();

            toggles_game[i].isOn = (i == 0);
            toggles_game[i].onValueChanged.AddListener(delegate {OnValueToggle(toggle); });
        }

        isInit = true;

        MyScoreUpdate("All");
    }

    void InitSlot()
    {
        for (int i = 0; i < slotInfos.Length; i++)
        {
            slotInfos[i].text_name.text = "-";
            slotInfos[i].text_score.text = "-";
            slotInfos[i].image_profile.texture = null;
            slotInfos[i].image_grade.enabled = false;
        }
        text_myRank.text = "-";
        anim.Rebind();
    }

    public void MyScoreUpdate(string _gameType, int count = 0)
    {
        Init();

        gameType = _gameType;

        InitSlot();

        if (coroutine_MyScoreUpdate != null)
        {
            StopCoroutine(coroutine_MyScoreUpdate);
        }
        coroutine_MyScoreUpdate = StartCoroutine(Coroutine_MyScoreUpdate(count));
    }

    Coroutine coroutine_MyScoreUpdate;

    IEnumerator Coroutine_MyScoreUpdate(int count = 0)
    {
        while (GameDataManager.instance.state_userInfo != GameDataManager.UserInfoState.Completed)
        {
            yield return null;
        }

        WWWForm form = new WWWForm();

        int gameNum = 2000;
        switch (gameType)
        {
            case "All":
                {
                    gameNum = 2000;
                }
                break;
            case "JetSki":
                {
                    gameNum = 2100;
                }
                break;
            case "BeachVolleyball":
                {
                    gameNum = 2200;
                }
                break;
            case "Fishing":
                {
                    gameNum = 2300;
                }
                break;
            case "FlyingDisc":
                {
                    gameNum = 2400;
                }
                break;
            case "Cycling":
                {
                    gameNum = 2500;
                }
                break;
            case "Swimming":
                {
                    gameNum = 2600;
                }
                break;
            case "ClayShooting":
                {
                    gameNum = 2700;
                }
                break;
        }
        Debug.Log(gameNum);
        StartCoroutine(AppnoriWebRequest.API_Ranking(gameNum, "M", SetTextUI));
    }

    void SetTextUI(AppnoriWebRequest.Response_Ranking leaderBoardInfo)
    {
        for (int i = 0; i < leaderBoardInfo.ds.Count; i++)
        {
            slotInfos[i + 1].text_score.text = leaderBoardInfo.ds[i].totLaddrPoint.ToString();
            slotInfos[i + 1].text_name.text = leaderBoardInfo.ds[i].nickNm;
            GameDataManager.instance.SetImage(leaderBoardInfo.ds[i].avatarUrl, slotInfos[i + 1].image_profile);
            PublicGameUIManager.GetInstance.SetGradeImage(leaderBoardInfo.ds[i].userGrade, slotInfos[i + 1].image_grade);
        }

        if (leaderBoardInfo.rs != null)
        {
            text_myRank.text = leaderBoardInfo.rs.userRank.ToString();
            slotInfos[0].text_score.text = leaderBoardInfo.rs.totLaddrPoint.ToString();
        }
        else
        {
            text_myRank.text = "-";
            slotInfos[0].text_score.text = "0";
        }

        slotInfos[0].text_name.text = GameDataManager.instance.userInfo_mine.nick;
        GameDataManager.instance.SetImage(GameDataManager.image_url_mine, slotInfos[0].image_profile);
        int gameNum = 0;
        switch (gameType)
        {
            case "All":
                {
                    gameNum = 0;
                }
                break;
            case "JetSki":
                {
                    gameNum = 1;
                }
                break;
            case "BeachVolleyball":
                {
                    gameNum = 2;
                }
                break;
            case "Fishing":
                {
                    gameNum = 3;
                }
                break;
            case "FlyingDisc":
                {
                    gameNum = 4;
                }
                break;
            case "Cycling":
                {
                    gameNum = 5;
                }
                break;
            case "Swimming":
                {
                    gameNum = 6;
                }
                break;
            case "ClayShooting":
                {
                    gameNum = 7;
                }
                break;
        }
        PublicGameUIManager.GetInstance.SetGradeImage(GameDataManager.instance.userInfo_mine.gameScores[gameNum].userGrade, slotInfos[0].image_grade);
        anim.SetTrigger("OnStart");
    }

    public void Close()
    {
        Init();

        gameObject.SetActive(false);
    }

    public void OnValueToggle(Toggle toggle)
    {
        if (!toggle.isOn)
        {
            return;
        }
        if (delayTime > 0f)
        {
            return;
        }
        delayTime = 1f;
        canvasGroup.interactable = false;
        switch (toggle.gameObject.name)
        {
            case "Toggle00":
                {
                    MyScoreUpdate("All");
                }
                break;
            case "Toggle01":
                {
                    MyScoreUpdate("JetSki");
                }
                break;
            case "Toggle02":
                {
                    MyScoreUpdate("BeachVolleyball");
                }
                break;
            case "Toggle03":
                {
                    MyScoreUpdate("Fishing");
                }
                break;
            case "Toggle04":
                {
                    MyScoreUpdate("FlyingDisc");
                }
                break;
            case "Toggle05":
                {
                    MyScoreUpdate("Cycling");
                }
                break;
            case "Toggle06":
                {
                    MyScoreUpdate("Swimming");
                }
                break;
            case "Toggle07":
                {
                    MyScoreUpdate("ClayShooting");
                }
                break;
        }
    }
}
